"""empty message

Revision ID: 2ae476a753ae
Revises: 
Create Date: 2023-02-22 15:11:59.742861

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2ae476a753ae'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('clients', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_table_comment(
        'clients',
        existing_comment='Each client row defines a provider of site data\n\n*Approximate size: *\nOne row per client = ~4 rows',
        schema=None
    )
    op.alter_column('datetime_intervals', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('datetime_intervals_end_utc_idx', table_name='datetime_intervals')
    op.drop_index('datetime_intervals_start_utc_idx', table_name='datetime_intervals')
    op.drop_table_comment(
        'datetime_intervals',
        existing_comment='Each datetime_interval row defines a timespan between a start and end time\n\n*Approximate size: *\nOne interval every 5 minutes per day = ~288 rows per day',
        schema=None
    )
    op.alter_column('forecast_values', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('forecast_values', 'datetime_interval_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The time interval over which this predicted power value applies',
               existing_nullable=False)
    op.alter_column('forecast_values', 'forecast_generation_kw',
               existing_type=sa.REAL(),
               comment=None,
               existing_comment='The predicted power generation of this site for the given time interval',
               existing_nullable=False)
    op.alter_column('forecast_values', 'forecast_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The forecast sequence this forcast value belongs to',
               existing_nullable=False)
    op.drop_index('forecast_values_datetime_interval_uuid', table_name='forecast_values')
    op.drop_index('forecast_values_forecast_uuid', table_name='forecast_values')
    op.drop_table_comment(
        'forecast_values',
        existing_comment='Each forecast_value row is a prediction for the power output\nof a site over a target datetime interval. Many predictions\nare made for each site at each target interval.\n\n*Approximate size: *\nOne forecast value every 5 minutes per site per forecast.\nEach forecast"s prediction sequence covers 24 hours of target\nintervals = ~324,000,000 rows per day',
        schema=None
    )
    op.alter_column('forecasts', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='The creation time of the forecast sequence')
    op.alter_column('forecasts', 'site_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The site for which the forecast sequence was generated',
               existing_nullable=False)
    op.alter_column('forecasts', 'forecast_version',
               existing_type=sa.VARCHAR(length=32),
               comment=None,
               existing_comment='The semantic version of the model used to generate the forecast',
               existing_nullable=False)
    op.drop_index('forecasts_site_uuid', table_name='forecasts')
    op.drop_table_comment(
        'forecasts',
        existing_comment='Each forecast row refers to a sequence of predicted solar generation values\nover a set of target times for a site.\n\n*Approximate size: *\nOne forecast per site every 5 minutes = ~1,125,000 rows per day',
        schema=None
    )
    op.alter_column('generation', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('generation', 'site_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The site for which this geenration yield belongs to',
               existing_nullable=False)
    op.alter_column('generation', 'power_kw',
               existing_type=sa.REAL(),
               comment=None,
               existing_comment='The actual generated power in kW at this site for this datetime interval',
               existing_nullable=False)
    op.alter_column('generation', 'datetime_interval_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The time interval over which this generated power value applies',
               existing_nullable=False)
    op.drop_index('generation_datetime_interval_uuid', table_name='generation')
    op.drop_index('generation_site_uuid', table_name='generation')
    op.drop_table_comment(
        'generation',
        existing_comment='Each yield row specifies a generated power output over a\ngiven time range for a site.\n\n*Approximate size: *\nGeneration populated every 5 minutes per site * 4000 sites = ~1,125,000 rows per day',
        schema=None
    )
    op.alter_column('latest_forecast_values', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('latest_forecast_values', 'datetime_interval_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The time interval over which this predicted power value applies',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'forecast_generation_kw',
               existing_type=sa.REAL(),
               comment=None,
               existing_comment='The predicted power generation of this site for the given time interval',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'forecast_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The forecast sequence this forcast value belongs to',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'site_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The site for which the forecast sequence was generated',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'forecast_version',
               existing_type=sa.VARCHAR(length=32),
               comment=None,
               existing_comment='The semantic version of the model used to generate the forecast',
               existing_nullable=False)
    op.drop_table_comment(
        'latest_forecast_values',
        existing_comment='Each forecast_value row is a prediction for the power output\nof a site over a target datetime interval. Only the most recent\nprediction for each target time interval is stored in this table\nper site.\n\n*Approximate size: *\nOne forecast value every 5 minutes per site per forecast\nsequence = ~1,125,000 rows per day',
        schema=None
    )
    op.alter_column('sites', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('sites', 'client_uuid',
               existing_type=postgresql.UUID(),
               comment=None,
               existing_comment='The internal ID of the client providing the site data',
               existing_nullable=False)
    op.alter_column('sites', 'client_site_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The ID of the site as given by the providing client',
               existing_nullable=True)
    op.alter_column('sites', 'client_site_name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='The ID of the site as given by the providing client',
               existing_nullable=True)
    op.alter_column('sites', 'region',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='The region in the UK in which the site is located',
               existing_nullable=True)
    op.alter_column('sites', 'dno',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='The Distribution Node Operator that owns the site',
               existing_nullable=True)
    op.alter_column('sites', 'gsp',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='The Grid Supply Point in which the site is located',
               existing_nullable=True)
    op.alter_column('sites', 'orientation',
               existing_type=sa.REAL(),
               comment=None,
               existing_comment='The rotation of the panel in degrees. 180° points south',
               existing_nullable=True)
    op.alter_column('sites', 'tilt',
               existing_type=sa.REAL(),
               comment=None,
               existing_comment='The tile of the panel in degrees. 90° indicates the panel is vertical',
               existing_nullable=True)
    op.alter_column('sites', 'capacity_kw',
               existing_type=sa.REAL(),
               comment=None,
               existing_comment='The physical limit on the production capacity of the site',
               existing_nullable=False)
    op.alter_column('sites', 'ml_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Auto-incrementing integer ID of the site for use in ML training',
               existing_nullable=False,
               autoincrement=True)
    op.drop_index('idx_client', table_name='sites')
    op.create_unique_constraint('idx_client', 'sites', ['client_site_id', 'client_uuid'])
    op.create_unique_constraint(None, 'sites', ['ml_id'])
    op.drop_table_comment(
        'sites',
        existing_comment='Each site row specifies a single panel or cluster of panels\nfound on a residential house or commercial building. Their\ndata is provided by a client.\n\n*Approximate size: *\n4 clients * ~1000 sites each = ~4000 rows',
        schema=None
    )
    op.drop_table_comment(
        'status',
        existing_comment='Each status row defines a message reporting on the status of the\nservices within the nowcasting domain\n\n*Approximate size: *\n~1 row per day',
        schema=None
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'status',
        'Each status row defines a message reporting on the status of the\nservices within the nowcasting domain\n\n*Approximate size: *\n~1 row per day',
        existing_comment=None,
        schema=None
    )
    op.create_table_comment(
        'sites',
        'Each site row specifies a single panel or cluster of panels\nfound on a residential house or commercial building. Their\ndata is provided by a client.\n\n*Approximate size: *\n4 clients * ~1000 sites each = ~4000 rows',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'sites', type_='unique')
    op.drop_constraint('idx_client', 'sites', type_='unique')
    op.create_index('idx_client', 'sites', ['client_uuid', 'client_site_id'], unique=False)
    op.alter_column('sites', 'ml_id',
               existing_type=sa.INTEGER(),
               comment='Auto-incrementing integer ID of the site for use in ML training',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('sites', 'capacity_kw',
               existing_type=sa.REAL(),
               comment='The physical limit on the production capacity of the site',
               existing_nullable=False)
    op.alter_column('sites', 'tilt',
               existing_type=sa.REAL(),
               comment='The tile of the panel in degrees. 90° indicates the panel is vertical',
               existing_nullable=True)
    op.alter_column('sites', 'orientation',
               existing_type=sa.REAL(),
               comment='The rotation of the panel in degrees. 180° points south',
               existing_nullable=True)
    op.alter_column('sites', 'gsp',
               existing_type=sa.VARCHAR(length=255),
               comment='The Grid Supply Point in which the site is located',
               existing_nullable=True)
    op.alter_column('sites', 'dno',
               existing_type=sa.VARCHAR(length=255),
               comment='The Distribution Node Operator that owns the site',
               existing_nullable=True)
    op.alter_column('sites', 'region',
               existing_type=sa.VARCHAR(length=255),
               comment='The region in the UK in which the site is located',
               existing_nullable=True)
    op.alter_column('sites', 'client_site_name',
               existing_type=sa.VARCHAR(length=255),
               comment='The ID of the site as given by the providing client',
               existing_nullable=True)
    op.alter_column('sites', 'client_site_id',
               existing_type=sa.INTEGER(),
               comment='The ID of the site as given by the providing client',
               existing_nullable=True)
    op.alter_column('sites', 'client_uuid',
               existing_type=postgresql.UUID(),
               comment='The internal ID of the client providing the site data',
               existing_nullable=False)
    op.alter_column('sites', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table_comment(
        'latest_forecast_values',
        'Each forecast_value row is a prediction for the power output\nof a site over a target datetime interval. Only the most recent\nprediction for each target time interval is stored in this table\nper site.\n\n*Approximate size: *\nOne forecast value every 5 minutes per site per forecast\nsequence = ~1,125,000 rows per day',
        existing_comment=None,
        schema=None
    )
    op.alter_column('latest_forecast_values', 'forecast_version',
               existing_type=sa.VARCHAR(length=32),
               comment='The semantic version of the model used to generate the forecast',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'site_uuid',
               existing_type=postgresql.UUID(),
               comment='The site for which the forecast sequence was generated',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'forecast_uuid',
               existing_type=postgresql.UUID(),
               comment='The forecast sequence this forcast value belongs to',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'forecast_generation_kw',
               existing_type=sa.REAL(),
               comment='The predicted power generation of this site for the given time interval',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'datetime_interval_uuid',
               existing_type=postgresql.UUID(),
               comment='The time interval over which this predicted power value applies',
               existing_nullable=False)
    op.alter_column('latest_forecast_values', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table_comment(
        'generation',
        'Each yield row specifies a generated power output over a\ngiven time range for a site.\n\n*Approximate size: *\nGeneration populated every 5 minutes per site * 4000 sites = ~1,125,000 rows per day',
        existing_comment=None,
        schema=None
    )
    op.create_index('generation_site_uuid', 'generation', ['site_uuid'], unique=False)
    op.create_index('generation_datetime_interval_uuid', 'generation', ['datetime_interval_uuid'], unique=False)
    op.alter_column('generation', 'datetime_interval_uuid',
               existing_type=postgresql.UUID(),
               comment='The time interval over which this generated power value applies',
               existing_nullable=False)
    op.alter_column('generation', 'power_kw',
               existing_type=sa.REAL(),
               comment='The actual generated power in kW at this site for this datetime interval',
               existing_nullable=False)
    op.alter_column('generation', 'site_uuid',
               existing_type=postgresql.UUID(),
               comment='The site for which this geenration yield belongs to',
               existing_nullable=False)
    op.alter_column('generation', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table_comment(
        'forecasts',
        'Each forecast row refers to a sequence of predicted solar generation values\nover a set of target times for a site.\n\n*Approximate size: *\nOne forecast per site every 5 minutes = ~1,125,000 rows per day',
        existing_comment=None,
        schema=None
    )
    op.create_index('forecasts_site_uuid', 'forecasts', ['site_uuid'], unique=False)
    op.alter_column('forecasts', 'forecast_version',
               existing_type=sa.VARCHAR(length=32),
               comment='The semantic version of the model used to generate the forecast',
               existing_nullable=False)
    op.alter_column('forecasts', 'site_uuid',
               existing_type=postgresql.UUID(),
               comment='The site for which the forecast sequence was generated',
               existing_nullable=False)
    op.alter_column('forecasts', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment='The creation time of the forecast sequence')
    op.create_table_comment(
        'forecast_values',
        'Each forecast_value row is a prediction for the power output\nof a site over a target datetime interval. Many predictions\nare made for each site at each target interval.\n\n*Approximate size: *\nOne forecast value every 5 minutes per site per forecast.\nEach forecast"s prediction sequence covers 24 hours of target\nintervals = ~324,000,000 rows per day',
        existing_comment=None,
        schema=None
    )
    op.create_index('forecast_values_forecast_uuid', 'forecast_values', ['forecast_uuid'], unique=False)
    op.create_index('forecast_values_datetime_interval_uuid', 'forecast_values', ['datetime_interval_uuid'], unique=False)
    op.alter_column('forecast_values', 'forecast_uuid',
               existing_type=postgresql.UUID(),
               comment='The forecast sequence this forcast value belongs to',
               existing_nullable=False)
    op.alter_column('forecast_values', 'forecast_generation_kw',
               existing_type=sa.REAL(),
               comment='The predicted power generation of this site for the given time interval',
               existing_nullable=False)
    op.alter_column('forecast_values', 'datetime_interval_uuid',
               existing_type=postgresql.UUID(),
               comment='The time interval over which this predicted power value applies',
               existing_nullable=False)
    op.alter_column('forecast_values', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table_comment(
        'datetime_intervals',
        'Each datetime_interval row defines a timespan between a start and end time\n\n*Approximate size: *\nOne interval every 5 minutes per day = ~288 rows per day',
        existing_comment=None,
        schema=None
    )
    op.create_index('datetime_intervals_start_utc_idx', 'datetime_intervals', ['start_utc'], unique=False)
    op.create_index('datetime_intervals_end_utc_idx', 'datetime_intervals', ['end_utc'], unique=False)
    op.alter_column('datetime_intervals', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table_comment(
        'clients',
        'Each client row defines a provider of site data\n\n*Approximate size: *\nOne row per client = ~4 rows',
        existing_comment=None,
        schema=None
    )
    op.alter_column('clients', 'created_utc',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    # ### end Alembic commands ###
